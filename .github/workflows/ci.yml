name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript type checking
      run: npm run type-check
    
    - name: Run Modus color linting
      run: npm run lint:colors
    
    - name: Build project
      run: npm run build
    
    - name: Check build output
      run: |
        if [ ! -d "dist" ]; then
          echo "Build failed - dist directory not found"
          exit 1
        fi
        echo "Build successful - dist directory created"
        ls -la dist/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        # Run audit and capture output
        echo "Running npm audit..."
        npm audit --audit-level moderate || echo "Audit completed with findings"
    
    - name: Check for known vulnerabilities
      run: |
        # Check for high/critical vulnerabilities with better error handling
        echo "Checking for high/critical vulnerabilities..."
        if npm audit --audit-level high --json 2>/dev/null | grep -q '"level":"high\|critical"' 2>/dev/null; then
          echo "⚠️ High or critical vulnerabilities found!"
          echo "Running detailed audit report..."
          npm audit --audit-level high || true
          echo "Please review and update dependencies as needed"
          # Don't fail the build for now, just warn
          echo "::warning::High or critical vulnerabilities detected"
        else
          echo "✅ No high or critical vulnerabilities found"
        fi

  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check Modus color compliance
      run: npm run lint:colors
    
    - name: Validate package.json
      run: |
        # Check if package.json is valid JSON
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
        echo "package.json is valid JSON"
    
    - name: Check for required files
      run: |
        required_files=("README.md" "CONTRIBUTING.md" "SECURITY.md" "package.json" "tsconfig.json" "vite.config.ts")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Required file missing: $file"
            exit 1
          fi
        done
        echo "All required files present"

  validate-structure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate project structure
      run: |
        # Check for required directories
        required_dirs=("src" "src/components" "src/views" "src/router" "src/types" ".cursor" ".cursor/rules")
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "Required directory missing: $dir"
            exit 1
          fi
        done
        echo "Project structure validation passed"
    
    - name: Validate Cursor rules
      run: |
        # Check for required rule files
        rule_files=(".cursor/rules/color-usage.mdc" ".cursor/rules/modus-web-components.mdc" ".cursor/rules/vue-component-creation.mdc")
        for file in "${rule_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Required rule file missing: $file"
            exit 1
          fi
        done
        echo "Cursor rules validation passed"
    
    - name: Validate MCP configuration
      run: |
        if [ ! -f ".cursor/mcp.json" ]; then
          echo "MCP configuration missing: .cursor/mcp.json"
          exit 1
        fi
        # Validate JSON syntax
        node -e "JSON.parse(require('fs').readFileSync('.cursor/mcp.json', 'utf8'))"
        echo "MCP configuration is valid"

  compatibility:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check Node.js compatibility
      run: |
        # Check if package.json specifies correct Node.js version
        node_version=$(node -e "console.log(process.version)")
        echo "Running on Node.js version: $node_version"
        
        # Verify minimum Node.js version requirement
        if ! node -e "
          const semver = require('semver');
          const current = process.version;
          const required = '20.0.0';
          if (!semver.gte(current, required)) {
            console.error('Node.js version', current, 'is below required', required);
            process.exit(1);
          }
          console.log('Node.js version check passed');
        " 2>/dev/null; then
          # Fallback check without semver
          major_version=$(echo $node_version | cut -d'.' -f1 | sed 's/v//')
          if [ "$major_version" -lt 20 ]; then
            echo "Node.js version $node_version is below required v20.0.0"
            exit 1
          fi
        fi
    
    - name: Test build on different environments
      run: |
        # Test production build
        NODE_ENV=production npm run build
        echo "Production build successful"
        
        # Clean up
        rm -rf dist
        
        # Test development build
        NODE_ENV=development npm run build
        echo "Development build successful"
